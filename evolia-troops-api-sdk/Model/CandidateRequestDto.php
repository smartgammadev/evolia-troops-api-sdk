<?php
/**
 * CandidateRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  EvoliaTroops
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * troops-evolia-gateway
 *
 * Troops Evolia Gateway API
 *
 * OpenAPI spec version: 1.0.0-troops
 * Contact: ops@troops.fr
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EvoliaTroops\Model;

use \ArrayAccess;
use \EvoliaTroops\ObjectSerializer;

/**
 * CandidateRequestDto Class Doc Comment
 *
 * @category Class
 * @package  EvoliaTroops
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CandidateRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CandidateRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'troopsId' => 'float',
'nationality' => 'string',
'countryCode' => 'string',
'name' => 'string',
'birthName' => 'string',
'surname' => 'string',
'email' => 'string',
'phone' => 'string',
'qualification' => 'string',
'address' => '\EvoliaTroops\Model\CandidateAddressDto',
'birthInformations' => '\EvoliaTroops\Model\CandidateBirthInfoDto',
'agencies' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'troopsId' => null,
'nationality' => null,
'countryCode' => null,
'name' => null,
'birthName' => null,
'surname' => null,
'email' => null,
'phone' => null,
'qualification' => null,
'address' => null,
'birthInformations' => null,
'agencies' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'troopsId' => 'troopsId',
'nationality' => 'nationality',
'countryCode' => 'countryCode',
'name' => 'name',
'birthName' => 'birthName',
'surname' => 'surname',
'email' => 'email',
'phone' => 'phone',
'qualification' => 'qualification',
'address' => 'address',
'birthInformations' => 'birthInformations',
'agencies' => 'agencies'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'troopsId' => 'setTroopsId',
'nationality' => 'setNationality',
'countryCode' => 'setCountryCode',
'name' => 'setName',
'birthName' => 'setBirthName',
'surname' => 'setSurname',
'email' => 'setEmail',
'phone' => 'setPhone',
'qualification' => 'setQualification',
'address' => 'setAddress',
'birthInformations' => 'setBirthInformations',
'agencies' => 'setAgencies'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'troopsId' => 'getTroopsId',
'nationality' => 'getNationality',
'countryCode' => 'getCountryCode',
'name' => 'getName',
'birthName' => 'getBirthName',
'surname' => 'getSurname',
'email' => 'getEmail',
'phone' => 'getPhone',
'qualification' => 'getQualification',
'address' => 'getAddress',
'birthInformations' => 'getBirthInformations',
'agencies' => 'getAgencies'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['troopsId'] = isset($data['troopsId']) ? $data['troopsId'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['birthName'] = isset($data['birthName']) ? $data['birthName'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['qualification'] = isset($data['qualification']) ? $data['qualification'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['birthInformations'] = isset($data['birthInformations']) ? $data['birthInformations'] : null;
        $this->container['agencies'] = isset($data['agencies']) ? $data['agencies'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['troopsId'] === null) {
            $invalidProperties[] = "'troopsId' can't be null";
        }
        if ($this->container['nationality'] === null) {
            $invalidProperties[] = "'nationality' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['surname'] === null) {
            $invalidProperties[] = "'surname' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['birthInformations'] === null) {
            $invalidProperties[] = "'birthInformations' can't be null";
        }
        if ($this->container['agencies'] === null) {
            $invalidProperties[] = "'agencies' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets troopsId
     *
     * @return float
     */
    public function getTroopsId()
    {
        return $this->container['troopsId'];
    }

    /**
     * Sets troopsId
     *
     * @param float $troopsId troopsId
     *
     * @return $this
     */
    public function setTroopsId($troopsId)
    {
        $this->container['troopsId'] = $troopsId;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality Nationality code like FRA, ESP ...
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode Country code like FR, ES, EN, US ...
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets birthName
     *
     * @return string
     */
    public function getBirthName()
    {
        return $this->container['birthName'];
    }

    /**
     * Sets birthName
     *
     * @param string $birthName birthName
     *
     * @return $this
     */
    public function setBirthName($birthName)
    {
        $this->container['birthName'] = $birthName;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets qualification
     *
     * @return string
     */
    public function getQualification()
    {
        return $this->container['qualification'];
    }

    /**
     * Sets qualification
     *
     * @param string $qualification qualification
     *
     * @return $this
     */
    public function setQualification($qualification)
    {
        $this->container['qualification'] = $qualification;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \EvoliaTroops\Model\CandidateAddressDto
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \EvoliaTroops\Model\CandidateAddressDto $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets birthInformations
     *
     * @return \EvoliaTroops\Model\CandidateBirthInfoDto
     */
    public function getBirthInformations()
    {
        return $this->container['birthInformations'];
    }

    /**
     * Sets birthInformations
     *
     * @param \EvoliaTroops\Model\CandidateBirthInfoDto $birthInformations birthInformations
     *
     * @return $this
     */
    public function setBirthInformations($birthInformations)
    {
        $this->container['birthInformations'] = $birthInformations;

        return $this;
    }

    /**
     * Gets agencies
     *
     * @return string[]
     */
    public function getAgencies()
    {
        return $this->container['agencies'];
    }

    /**
     * Sets agencies
     *
     * @param string[] $agencies Agencies Code
     *
     * @return $this
     */
    public function setAgencies($agencies)
    {
        $this->container['agencies'] = $agencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
