<?php
/**
 * CustomerRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  EvoliaTroops
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * troops-evolia-gateway
 *
 * Troops Evolia Gateway API
 *
 * OpenAPI spec version: 1.0.0-troops
 * Contact: ops@troops.fr
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EvoliaTroops\Model;

use \ArrayAccess;
use \EvoliaTroops\ObjectSerializer;

/**
 * CustomerRequestDto Class Doc Comment
 *
 * @category Class
 * @package  EvoliaTroops
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'troopsId' => 'float',
'name' => 'string',
'shortName' => 'string',
'legalForm' => 'string',
'address' => '\EvoliaTroops\Model\CustomerAddressDto',
'phone' => 'string',
'email' => 'string',
'apeCode' => 'string',
'vatKey' => 'string',
'sirenCode' => 'string',
'siretNic' => 'string',
'agencies' => 'string[]',
'billingAddress' => '\EvoliaTroops\Model\CustomerAdditionalAddressDto',
'missionAddress' => '\EvoliaTroops\Model\CustomerAdditionalAddressDto'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'troopsId' => null,
'name' => null,
'shortName' => null,
'legalForm' => null,
'address' => null,
'phone' => null,
'email' => null,
'apeCode' => null,
'vatKey' => null,
'sirenCode' => null,
'siretNic' => null,
'agencies' => null,
'billingAddress' => null,
'missionAddress' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'troopsId' => 'troopsId',
'name' => 'name',
'shortName' => 'shortName',
'legalForm' => 'legalForm',
'address' => 'address',
'phone' => 'phone',
'email' => 'email',
'apeCode' => 'apeCode',
'vatKey' => 'vatKey',
'sirenCode' => 'sirenCode',
'siretNic' => 'siretNic',
'agencies' => 'agencies',
'billingAddress' => 'billingAddress',
'missionAddress' => 'missionAddress'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'troopsId' => 'setTroopsId',
'name' => 'setName',
'shortName' => 'setShortName',
'legalForm' => 'setLegalForm',
'address' => 'setAddress',
'phone' => 'setPhone',
'email' => 'setEmail',
'apeCode' => 'setApeCode',
'vatKey' => 'setVatKey',
'sirenCode' => 'setSirenCode',
'siretNic' => 'setSiretNic',
'agencies' => 'setAgencies',
'billingAddress' => 'setBillingAddress',
'missionAddress' => 'setMissionAddress'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'troopsId' => 'getTroopsId',
'name' => 'getName',
'shortName' => 'getShortName',
'legalForm' => 'getLegalForm',
'address' => 'getAddress',
'phone' => 'getPhone',
'email' => 'getEmail',
'apeCode' => 'getApeCode',
'vatKey' => 'getVatKey',
'sirenCode' => 'getSirenCode',
'siretNic' => 'getSiretNic',
'agencies' => 'getAgencies',
'billingAddress' => 'getBillingAddress',
'missionAddress' => 'getMissionAddress'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['troopsId'] = isset($data['troopsId']) ? $data['troopsId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['legalForm'] = isset($data['legalForm']) ? $data['legalForm'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['apeCode'] = isset($data['apeCode']) ? $data['apeCode'] : null;
        $this->container['vatKey'] = isset($data['vatKey']) ? $data['vatKey'] : null;
        $this->container['sirenCode'] = isset($data['sirenCode']) ? $data['sirenCode'] : null;
        $this->container['siretNic'] = isset($data['siretNic']) ? $data['siretNic'] : null;
        $this->container['agencies'] = isset($data['agencies']) ? $data['agencies'] : null;
        $this->container['billingAddress'] = isset($data['billingAddress']) ? $data['billingAddress'] : null;
        $this->container['missionAddress'] = isset($data['missionAddress']) ? $data['missionAddress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['troopsId'] === null) {
            $invalidProperties[] = "'troopsId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['shortName'] === null) {
            $invalidProperties[] = "'shortName' can't be null";
        }
        if ($this->container['legalForm'] === null) {
            $invalidProperties[] = "'legalForm' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['sirenCode'] === null) {
            $invalidProperties[] = "'sirenCode' can't be null";
        }
        if ($this->container['siretNic'] === null) {
            $invalidProperties[] = "'siretNic' can't be null";
        }
        if ($this->container['agencies'] === null) {
            $invalidProperties[] = "'agencies' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets troopsId
     *
     * @return float
     */
    public function getTroopsId()
    {
        return $this->container['troopsId'];
    }

    /**
     * Sets troopsId
     *
     * @param float $troopsId troopsId
     *
     * @return $this
     */
    public function setTroopsId($troopsId)
    {
        $this->container['troopsId'] = $troopsId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets legalForm
     *
     * @return string
     */
    public function getLegalForm()
    {
        return $this->container['legalForm'];
    }

    /**
     * Sets legalForm
     *
     * @param string $legalForm legalForm
     *
     * @return $this
     */
    public function setLegalForm($legalForm)
    {
        $this->container['legalForm'] = $legalForm;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \EvoliaTroops\Model\CustomerAddressDto
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \EvoliaTroops\Model\CustomerAddressDto $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets apeCode
     *
     * @return string
     */
    public function getApeCode()
    {
        return $this->container['apeCode'];
    }

    /**
     * Sets apeCode
     *
     * @param string $apeCode apeCode
     *
     * @return $this
     */
    public function setApeCode($apeCode)
    {
        $this->container['apeCode'] = $apeCode;

        return $this;
    }

    /**
     * Gets vatKey
     *
     * @return string
     */
    public function getVatKey()
    {
        return $this->container['vatKey'];
    }

    /**
     * Sets vatKey
     *
     * @param string $vatKey vatKey
     *
     * @return $this
     */
    public function setVatKey($vatKey)
    {
        $this->container['vatKey'] = $vatKey;

        return $this;
    }

    /**
     * Gets sirenCode
     *
     * @return string
     */
    public function getSirenCode()
    {
        return $this->container['sirenCode'];
    }

    /**
     * Sets sirenCode
     *
     * @param string $sirenCode sirenCode
     *
     * @return $this
     */
    public function setSirenCode($sirenCode)
    {
        $this->container['sirenCode'] = $sirenCode;

        return $this;
    }

    /**
     * Gets siretNic
     *
     * @return string
     */
    public function getSiretNic()
    {
        return $this->container['siretNic'];
    }

    /**
     * Sets siretNic
     *
     * @param string $siretNic siretNic
     *
     * @return $this
     */
    public function setSiretNic($siretNic)
    {
        $this->container['siretNic'] = $siretNic;

        return $this;
    }

    /**
     * Gets agencies
     *
     * @return string[]
     */
    public function getAgencies()
    {
        return $this->container['agencies'];
    }

    /**
     * Sets agencies
     *
     * @param string[] $agencies Agencies Code
     *
     * @return $this
     */
    public function setAgencies($agencies)
    {
        $this->container['agencies'] = $agencies;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \EvoliaTroops\Model\CustomerAdditionalAddressDto
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \EvoliaTroops\Model\CustomerAdditionalAddressDto $billingAddress billingAddress
     *
     * @return $this
     */
    public function setBillingAddress($billingAddress)
    {
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets missionAddress
     *
     * @return \EvoliaTroops\Model\CustomerAdditionalAddressDto
     */
    public function getMissionAddress()
    {
        return $this->container['missionAddress'];
    }

    /**
     * Sets missionAddress
     *
     * @param \EvoliaTroops\Model\CustomerAdditionalAddressDto $missionAddress missionAddress
     *
     * @return $this
     */
    public function setMissionAddress($missionAddress)
    {
        $this->container['missionAddress'] = $missionAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
